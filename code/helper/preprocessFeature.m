function [XTrain,XValidation,XTest,muX,sigsqX] = preprocessFeature(idxSplit,f,h,iN,iF)    

    idxTrain = idxSplit.idxTrain;
    idxValidation = idxSplit.idxValidation;
    idxTest = idxSplit.idxTest;

    fTrain = cat(   2, ...
                    f.fsuscep(idxTrain,iN), ...
                    f.fsteepness(idxTrain,iN), ...
                    f.frr(idxTrain,iN), ...
                    f.ftgC(idxTrain,iN)+273.15, ...
                    f.fsd(idxTrain,iN), ...
                    f.fswe(idxTrain,iN), ...
                    f.ffsw(idxTrain,iN), ...
                    f.fslope(idxTrain,iN), ...
                    f.flithology(idxTrain,iN), ...
                    f.flandcover(idxTrain,iN)   );   
    fTrain = fTrain(:,find(h.feature(iF,:)==1));

    fValidation = cat(    2, ...
                    f.fsuscep(idxValidation,iN), ...
                    f.fsteepness(idxValidation,iN), ...
                    f.frr(idxValidation,iN), ...
                    f.ftgC(idxValidation,iN)+273.15, ...
                    f.fsd(idxValidation,iN), ...
                    f.fswe(idxValidation,iN), ...
                    f.ffsw(idxValidation,iN), ...
                    f.fslope(idxValidation,iN), ...
                    f.flithology(idxValidation,iN), ...
                    f.flandcover(idxValidation,iN) );   
    fValidation = fValidation(:,find(h.feature(iF,:)==1));

    fTest = cat(    2, ...
                    f.fsuscep(idxTest,iN), ...
                    f.fsteepness(idxTest,iN), ...
                    f.frr(idxTest,iN), ...
                    f.ftgC(idxTest,iN)+273.15, ...
                    f.fsd(idxTest,iN), ...
                    f.fswe(idxTest,iN), ...
                    f.ffsw(idxTest,iN), ...
                    f.fslope(idxTest,iN), ...
                    f.flithology(idxTest,iN), ...
                    f.flandcover(idxTest,iN) );   
    fTest = fTest(:,find(h.feature(iF,:)==1));

    muX = mean(fTrain);
    sigsqX = var(fTrain);

    XTrain = (fTrain - muX)./sqrt(sigsqX);
    XValidation = (fValidation - muX)./sqrt(sigsqX);
    XTest = (fTest - muX)./sqrt(sigsqX);

end

